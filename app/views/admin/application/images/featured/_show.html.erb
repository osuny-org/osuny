<div id="image-picker-app" class="image_picker" v-cloak>
  <%= osuny_panel t('featured_image.title'), small: true do %>
    <div class="app-content">
      <div v-if="!data.featured_image.blob.id" class="image_picker__selector">
        <div class="image_picker__selector__viewport">
          <input  id="featured-image-input"
                  hidden
                  ref="file"
                  type="file"
                  accept="<%= default_images_formats_accepted %>"
                  @change="onFileImageChange($event)">
          <button type="button"
                  class="btn"
                  @click.prevent="$refs.file.click()">
            <%= lucide_icon('upload') %>
            <%= t 'photo_import.buttons.upload' %>
          </button>
          <div class="form-text"><%= images_formats_accepted_hint %></div>
        </div>
        <button type="button"
                class="btn btn-sm"
                data-bs-toggle="modal"
                data-bs-target="#photoImportModal">
          <%= lucide_icon('cloud-download') %>
          <%= t 'photo_import.buttons.unsplash' %>
        </button>
        <button type="button"
                class="btn btn-sm"
                data-bs-toggle="modal"
                data-bs-target="#mediaImportModal">
          <%= lucide_icon('image') %>
          <%= t('photo_import.buttons.medias') %>
        </button>
      </div>
      <div v-if="data.featured_image.blob.id">
        <img :src="data.featured_image.blob.preview" class="img-fluid" />
        <div class="text-end">
          <a  class="btn btn-sm text-danger pe-0"
              v-on:click="removeImage()">
            <i class="<%= Icon::DELETE %>"></i>
            <%= t('featured_image.remove') %>
          </a>
        </div>
        <div class="mb-3">
          <label class="form-label" aria-label="<%= t('featured_image.alt.label') %>" for="alt">
            <%= t('featured_image.alt.label') %>
          </label>
          <input  id="alt"
                  class="form-control"
                  data-translatable="true" 
                  v-model="data.featured_image.alt"
                  placeholder="<%= t('featured_image.alt.label') %>"
                  type="text">
          <div class="form-text"><%= t('featured_image.alt.hint') %></div>
        </div>
        <div class="mb-3 summernote">
          <label class="form-label" aria-label="<%= t('featured_image.credit.label') %>" for="credit">
            <%= t('featured_image.credit.label') %>
          </label>
          <textarea id="credit" 
                    class="form-control summernote-vue"
                    data-translatable="true"
                    v-model="data.featured_image.credit"
                    placeholder="<%= t('featured_image.credit.label') %>"></textarea>
          <div class="form-text"><%= t('featured_image.credit.hint') %></div>
        </div>
      </div>
      {{ data.featured_image }}
    </div>
  <% end %>
</div>

<%# Include vue.js before call Vue.createApp %>
<%= javascript_include_tag 'vue' %>

<script nonce="<%= request.content_security_policy_nonce %>">
  var imagePickerApp = Vue.createApp({
    data() {
      return {
        directUpload: {
          url: "<%= rails_direct_uploads_url.html_safe %>"
        },
        data: <%= {
          featured_image: {
            blob: {
              id: about.featured_image&.blob_id,
              signed_id: about.featured_image&.signed_id,
              preview: "/media/#{ about.featured_image&.signed_id }/preview.jpg"
            },
            media: {
              id: nil
            },
            alt: about.featured_image_alt,
            credit: about.featured_image_credit
          }
        }.to_json.html_safe %>,
      }
    },
    methods: {
      onFileImageChange(event) {
        var files = event.target.files || event.dataTransfer.files;
        if (!files.length) {
          return;
        }
        this.uploadFile(event.target, files[0]);
      },
      uploadFile(input, file) {
        var size = Math.round(file.size / 1024 / 1024),
            sizeLimit = <%= Rails.application.config.default_image_max_size %>,
            sizeLimitMo = Math.round(sizeLimit / 1024 / 1024),
            controller = new Vue.DirectUploadController(input, file, this.directUpload.url),
            that = this;
        if (file.size > sizeLimit) {
          alert("<%= t('admin.communication.blocks.alerts.file_is_too_big').html_safe %> (" + size + " Mo > " + sizeLimitMo + " Mo)");
          return;
        }
        controller.start(function (blob) {
          that.data.featured_image.blob = {
            id: blob.id,
            signed_id: blob.signed_id,
            filename: blob.filename,
            preview: "/media/" + blob.signed_id + "/preview.jpg"
          };
          that.save();
        });
      },
      removeImage() {
        this.data.featured_image.blob = {};
        this.data.featured_image.alt = "";
        this.data.featured_image.credit = "";
      },
      handleSummernotes() {
        var $summernoteElements = $('.summernote-vue:not(.is-initialized)');
        $summernoteElements.each(function(index) {
          var element = $summernoteElements.get(index);
          this.initSummernote(element);
        }.bind(this));
      },
      initSummernote(element) {
        element.classList.add('is-initialized');
        $(element).summernote({
          lang: '<%= current_interface_language.summernote_locale unless current_interface_language.summernote_locale.blank? %>',
          toolbar: window.SUMMERNOTE_CONFIGS['link'].toolbar,
          callbacks: {
            onChange: function(content) {
              element.value = content;
              element.dispatchEvent(new Event('input'));
            },
          }
        });
      },
      save() {
        console.log("save");
        var params = {
          communication_website_post: {
            localizations_attributes: {
              id: "<%= @l10n.id %>",
              featured_image: this.data.featured_image.blob.id,
              featured_image_delete: null,
              featured_image_infos: "", 
              featured_image_alt: this.data.featured_image.alt,
              featured_image_credit: this.data.featured_image.credit
            }
          }
        };
        var xhr = new XMLHttpRequest();
        xhr.open("PATCH", "<%= request.path %>", true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.setRequestHeader('X-CSRF-Token', document.querySelector('[name="csrf-token"]').content);
        xhr.onreadystatechange = function () {
          if (this.readyState != 4) return;
          if (this.status == 200) {
              var data = JSON.parse(this.responseText);
              console.log(data);
          }
        };
        xhr.send(JSON.stringify(params));
      },
    },
    updated: function() {
      this.handleSummernotes();
    },
    mounted: function() {
      this.handleSummernotes();
    }
  });
 
  window.addEventListener('load', function(){
    setTimeout(function() {
      imagePickerApp.mount('#image-picker-app');
    }, 1000);
  });
</script>