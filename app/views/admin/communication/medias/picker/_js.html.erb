<%
current = {
  image: {
    blob: {
      id: about.featured_image&.blob_id,
      signed_id: about.featured_image&.signed_id,
      preview: "/media/#{ about.featured_image&.signed_id }/preview.jpg"
    },
    media: {
      id: nil
    },
    alt: about.featured_image_alt,
    credit: about.featured_image_credit
  }
}
# fr, en...
lang = about&.language&.iso_code if about.respond_to? :language
%>
var imagePickerApp = Vue.createApp({
  data() {
    return {
      needsSaving: false,
      current: <%= current.to_json.html_safe %>,
      previous: <%= current.to_json.html_safe %>,
      cloud: {
        query: <%= about.to_s.to_json.html_safe %>,
        modal: {
          opened: false
        },
        unsplash: {
          page: 1,
          data: {
            results: [],
            total: 0
          },
          selected: null
        },
        pexels: {
          page: 1,
          data: {
            results: [],
            total: 0
          },
          selected: null
        },
      },
      medias: {
        query: "",
        modal: {
          opened: false
        },
        page: 1,
        data: {
          results: [],
          total: 0
        },
        selected: null
      }
    }
  },
  methods: {
    // Commons
    cancel() {
      console.log("cancel");
      // Clone
      this.current = JSON.parse( JSON.stringify( this.previous ) );
      this.needsSaving = false;
    },
    save() {
      console.log("save");
      var params = {
        communication_website_post: {
          localizations_attributes: {
            id: "<%= @l10n.id %>",
            featured_image: this.current.image.blob.signed_id,
            featured_image_alt: this.current.image.alt,
            featured_image_credit: this.current.image.credit
          }
        }
      };
      var xhr = new XMLHttpRequest();
      xhr.open("PATCH", "<%= request.path %>.json", true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.setRequestHeader('X-CSRF-Token', document.querySelector('[name="csrf-token"]').content);
      xhr.onreadystatechange = function () {
        if (this.readyState != 4) return;
        if (this.status == 200) {
            console.log(this.responseText);
        }
      };
      xhr.send(JSON.stringify(params));
    },
    removeImage() {
      this.current.image.blob = {
        id: "",
        signed_id: "",
        preview: ""
      };
      this.save();
    },

    // Upload
    uploadInputChanged(event) {
      var files = event.target.files || event.dataTransfer.files;
      if (!files.length) {
        return;
      }
      this.uploadFile(event.target, files[0]);
    },
    uploadFile(input, file) {
      var size = Math.round(file.size / 1024 / 1024),
          sizeLimit = <%= Rails.application.config.default_image_max_size %>,
          sizeLimitMo = Math.round(sizeLimit / 1024 / 1024),
          url = "<%= rails_direct_uploads_url.html_safe %>",
          controller = new Vue.DirectUploadController(input, file, url),
          that = this;
      if (file.size > sizeLimit) {
        alert("<%= t('admin.communication.blocks.alerts.file_is_too_big').html_safe %> (" + size + " Mo > " + sizeLimitMo + " Mo)");
        return;
      }
      controller.start(function (blob) {
        that.current.image.blob = {
          id: blob.id,
          signed_id: blob.signed_id,
          filename: blob.filename,
          preview: "/media/" + blob.signed_id + "/preview.jpg"
        };
        that.save();
      });
    },

    // Cloud
    cloudOpen() {
      document.body.classList.add("modal-open");
      this.cloud.modal.opened = true;
      this.cloudSearch();
    },
    cloudClose() {
      document.body.classList.remove("modal-open");
      this.cloud.modal.opened = false;
    },
    cloudSearch() {
      this.cloudSearchUnsplash();
      this.cloudSearchPexels();
    },
    cloudSearchUnsplash() {
      var url = "<%= admin_communication_unsplash_path(website_id: nil, extranet_id: nil, journal_id: nil, format: :json) %>"
                    + '?query=' + encodeURIComponent(this.cloud.query)
                    + '&page=' + this.cloud.unsplash.page
                    + '&per_page=12&lang=<%= lang %>';
      this.cloudLoadSearchResults(url, this.cloud.unsplash);
    },
    cloudSearchPexels() {
      var url = "<%= admin_communication_pexels_path(website_id: nil, extranet_id: nil, journal_id: nil, format: :json) %>"
                  + '?query=' + encodeURIComponent(this.cloud.query)
                  + '&page=' + this.cloud.pexels.page
                  + '&per_page=12&lang=<%= lang %>';
      this.cloudLoadSearchResults(url, this.cloud.pexels);
    },
    cloudLoadSearchResults(url, source) {
      if (!this.cloud.query) {
        return null;
      }
      var xmlHttp = new XMLHttpRequest();
      xmlHttp.onreadystatechange = function() {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
          source.data.results = [];
          source.data = JSON.parse(xmlHttp.responseText);
        }
      }.bind(this);
      xmlHttp.open("GET", url, false);
      xmlHttp.send();
    },
    cloudSelectUnsplash(image) {
      this.cloud.unsplash.selected = image.id;
      this.cloud.pexels.selected = null;
      this.cloudSelect(image);
    },
    cloudSelectPexels(image) {
      this.cloud.unsplash.selected = null;
      this.cloud.pexels.selected = image.id;
      this.cloudSelect(image);
    },
    cloudSelect(image) {
      this.current.image = {
        blob: {
          id: "cloud",
          signed_id: "",
          preview: image.preview
        },
        alt: "",
        credit: image.credit
      }
      this.cloudClose();
    },

    // Medias
    mediasOpen() {
      document.body.classList.add("modal-open");
      this.medias.modal.opened = true;
      this.mediasSearch();
    },
    mediasClose() {
      document.body.classList.remove("modal-open");
      this.medias.modal.opened = false;
    },
    mediasSearch() {
      var url = "<%= admin_communication_medias_url(website_id: nil, extranet_id: nil, format: :json) %>"
                  + '?filters[for_search_term]=' + encodeURIComponent(this.medias.query);
                  console.log(url);
          xmlHttp = new XMLHttpRequest();
      xmlHttp.onreadystatechange = function() {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
          this.medias.data = JSON.parse(xmlHttp.responseText);
        }
      }.bind(this);
      xmlHttp.open("GET", url, false);
      xmlHttp.send();
    },
    mediasSelect(image) {
      this.current.image = {
        blob: {
          id: "medias",
          signed_id: "",
          preview: image.thumb
        },
        media: {
          id: image.id
        },
        alt: "",
        credit: image.credit
      }
      // TODO
      this.mediasClose();
    },

    // Summernote
    summernoteHandle() {
      var $summernoteElements = $('.summernote-vue:not(.is-initialized)');
      $summernoteElements.each(function(index) {
        var element = $summernoteElements.get(index);
        this.summernoteInit(element);
      }.bind(this));
    },
    summernoteInit(element) {
      element.classList.add('is-initialized');
      $(element).summernote({
        lang: '<%= current_interface_language.summernote_locale unless current_interface_language.summernote_locale.blank? %>',
        toolbar: window.SUMMERNOTE_CONFIGS['link'].toolbar,
        callbacks: {
          onChange: function(content) {
            element.value = content;
            element.dispatchEvent(new Event('input'));
          },
        }
      });
    },
  },
  watch: {
    'cloud.unsplash.page': function(newVal, oldVal) {
      this.cloudSearchUnsplash();
    },
    'cloud.pexels.page': function(newVal, oldVal) {
      this.cloudSearchPexels();
    },
    current: {
      handler: function() {
        this.needsSaving = true;
      },
      deep: true,
      flush: 'sync'
    }
  },
  updated: function() {
    this.summernoteHandle();
  },
  mounted: function() {
    this.summernoteHandle();
  }
});

window.addEventListener('load', function(){
  setTimeout(function() {
    imagePickerApp.mount('#image-picker-app');
  }, 1000);
});