<%
key ||= :featured_image
picker = Osuny::MediaPicker.new
picker.about = about
picker.key = key
# About name is default query
default_query = about.to_s
# Paths
save_path = pick_admin_communication_medias_path(website_id: nil, extranet_id: nil, journal_id: nil, format: :json)
unsplash_path = admin_communication_unsplash_path(website_id: nil, extranet_id: nil, journal_id: nil, format: :json)
pexels_path = admin_communication_pexels_path(website_id: nil, extranet_id: nil, journal_id: nil, format: :json)
medias_path = admin_communication_medias_url(website_id: nil, extranet_id: nil, format: :json)
# fr, en...
lang = about&.language&.iso_code if about.respond_to? :language
%>
var imagePickerApp = Vue.createApp({
  data() {
    return {
      changes: {
        needsSaving: false,
        savingInProgress: false,
      },
      current: <%= picker.to_json.html_safe %>,
      previous: <%= picker.to_json.html_safe %>,
      cloud: {
        query: <%= default_query.to_json.html_safe %>,
        modal: {
          opened: false
        },
        unsplash: {
          page: 1,
          data: {
            results: [],
            total: 0
          }
        },
        pexels: {
          page: 1,
          data: {
            results: [],
            total: 0
          }
        },
      },
      medias: {
        query: "",
        modal: {
          opened: false
        },
        page: 1,
        data: {
          results: [],
          total: 0
        }
      }
    }
  },
  methods: {
    // Commons
    save() {
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "<%= save_path %>", true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.setRequestHeader('X-CSRF-Token', document.querySelector('[name="csrf-token"]').content);
      xhr.onreadystatechange = function () {
        if (xhr.readyState != 4) return;
        if (xhr.status == 200) {
          console.log(xhr.responseText);
          this.current = JSON.parse(xhr.responseText);
          this.previous = JSON.parse(xhr.responseText);
          this.changes.needsSaving = false;
          this.changes.savingInProgress = false;
        }
      }.bind(this);
      xhr.send(JSON.stringify(this.current));
      this.changes.savingInProgress = true;
    },
    cancel() {
      // Clone
      this.current = JSON.parse(JSON.stringify(this.previous));
      this.summernoteHandle();
      this.changes.needsSaving = false;
    },
    removeImage() {
      this.resetOrigin();
      this.current.image.url = "";
      this.current.origin.blob.delete = true;
    },
    resetOrigin() {
      this.current.origin = JSON.parse(JSON.stringify(this.previous.origin));
    },
    modalOpen() {
      document.body.classList.add("modal-open");
    },
    modalClose() {
      document.body.classList.remove("modal-open");
    },

    // Upload
    uploadInputChanged(event) {
      var files = event.target.files || event.dataTransfer.files;
      if (!files.length) {
        return;
      }
      this.uploadFile(event.target, files[0]);
    },
    uploadFile(input, file) {
      var size = Math.round(file.size / 1024 / 1024),
          sizeLimit = <%= Rails.application.config.default_image_max_size %>,
          sizeLimitMo = Math.round(sizeLimit / 1024 / 1024),
          url = "<%= rails_direct_uploads_url.html_safe %>",
          controller = new Vue.DirectUploadController(input, file, url),
          that = this;
      if (file.size > sizeLimit) {
        alert("<%= t('admin.communication.blocks.alerts.file_is_too_big').html_safe %> (" + size + " Mo > " + sizeLimitMo + " Mo)");
        return;
      }
      controller.start(function (blob) {
        that.current.image.url = "/media/" + blob.signed_id + "/preview.jpg";
        that.resetOrigin();
        that.current.origin.blob.id = blob.id;
        that.current.origin.blob.signed_id = blob.signed_id;
        that.current.origin.blob.checksum = blob.checksum;
      });
    },

    // Cloud
    cloudOpen() {
      this.modalOpen();
      this.cloud.modal.opened = true;
      this.cloudSearch();
    },
    cloudClose() {
      this.modalClose();
      this.cloud.modal.opened = false;
    },
    cloudSearch() {
      this.cloudSearchUnsplash();
      this.cloudSearchPexels();
    },
    cloudSearchUnsplash() {
      var url = "<%= unsplash_path %>"
                    + '?query=' + encodeURIComponent(this.cloud.query)
                    + '&page=' + this.cloud.unsplash.page
                    + '&per_page=12&lang=<%= lang %>';
      this.cloudLoadSearchResults(url, this.cloud.unsplash);
    },
    cloudSearchPexels() {
      var url = "<%= pexels_path %>"
                  + '?query=' + encodeURIComponent(this.cloud.query)
                  + '&page=' + this.cloud.pexels.page
                  + '&per_page=12&lang=<%= lang %>';
      this.cloudLoadSearchResults(url, this.cloud.pexels);
    },
    cloudLoadSearchResults(url, source) {
      if (!this.cloud.query) {
        return null;
      }
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
          source.data.results = [];
          source.data = JSON.parse(xhr.responseText);
        }
      }.bind(this);
      xhr.open("GET", url, false);
      xhr.send();
    },
    cloudSelectUnsplash(image) {
      this.resetOrigin();
      this.current.origin.cloud.unsplash.id = image.id;
      this.current.origin.cloud.unsplash.url = image.preview;
      this.cloudSelect(image);
    },
    cloudSelectPexels(image) {
      this.resetOrigin();
      this.current.origin.cloud.pexels.id = image.id;
      this.current.origin.cloud.pexels.url = image.preview;
      this.cloudSelect(image);
    },
    cloudSelect(image) {
      this.current.image.alt = "";
      this.current.image.credit = image.credit;
      this.current.image.url = image.preview;
      this.cloudClose();
    },

    // Medias
    mediasOpen() {
      this.modalOpen();
      this.medias.modal.opened = true;
      this.mediasSearch();
    },
    mediasClose() {
      this.modalClose();
      this.medias.modal.opened = false;
    },
    mediasSearch() {
      var xhr = new XMLHttpRequest(),
          url = "<%= medias_path %>"
                  + '?filters[for_search_term]=' + encodeURIComponent(this.medias.query);
      xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
          this.medias.data = JSON.parse(xhr.responseText);
        }
      }.bind(this);
      xhr.open("GET", url, false);
      xhr.send();
    },
    mediasSelect(image) {
      this.current.image.alt = "";
      this.current.image.credit = image.credit;
      this.current.image.url = image.thumb;
      this.resetOrigin();
      this.current.origin.medias.id = image.id;
      this.mediasClose();
    },

    // Summernote
    summernoteHandle() {
      var $summernoteElements = $('.summernote-vue:not(.is-initialized)');
      $summernoteElements.each(function(index) {
        var element = $summernoteElements.get(index);
        this.summernoteInit(element);
      }.bind(this));
    },
    summernoteInit(element) {
      element.classList.add('is-initialized');
      $(element).summernote({
        lang: '<%= current_interface_language.summernote_locale unless current_interface_language.summernote_locale.blank? %>',
        toolbar: window.SUMMERNOTE_CONFIGS['link'].toolbar,
        callbacks: {
          onChange: function(content) {
            element.value = content;
            element.dispatchEvent(new Event('input'));
          },
        }
      });
    },
  },
  watch: {
    'cloud.unsplash.page': function(newVal, oldVal) {
      this.cloudSearchUnsplash();
    },
    'cloud.pexels.page': function(newVal, oldVal) {
      this.cloudSearchPexels();
    },
    'current.credit': function () {
      this.summernoteHandle();
    },
    current: {
      handler: function() {
        this.changes.needsSaving = true;
      },
      deep: true,
      flush: 'sync'
    }
  },
  updated: function() {
    this.summernoteHandle();
  },
  mounted: function() {
    this.summernoteHandle();
  }
});

window.addEventListener('load', function(){
  setTimeout(function() {
    imagePickerApp.mount('#image-picker-app');
  }, 1000);
});